const TelegramBot = require('node-telegram-bot-api');
const { showMainMenu } = require('../utils/telegramUtils');
const { addProduct, removeProduct, listProducts, checkPrices } = require('../services/botService');
const logger = require('../utils/logger');
const { TELEGRAM_BOT_TOKEN } = require('../config/config');

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
const userStates = {};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥.
 */
function setupMessageHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        logger.info(`–ö–æ–º–∞–Ω–¥–∞ /start, chat_id: ${chatId}`);
        const helpText = `
üõçÔ∏è <b>–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ Wildberries</b>

–í–∞—à chat_id: ${chatId}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:
`;
        await bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
        await showMainMenu(bot, chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /menu
    bot.onText(/\/menu/, async (msg) => {
        const chatId = msg.chat.id;
        logger.info(`–ö–æ–º–∞–Ω–¥–∞ /menu, chat_id: ${chatId}`);
        await showMainMenu(bot, chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /add
    bot.onText(/\/add(?:\s+(\d+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        if (!match[1]) {
            logger.info(`–ö–æ–º–∞–Ω–¥–∞ /add –±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞, chat_id: ${chatId}`);
            userStates[chatId] = 'awaiting_article';
            await bot.sendMessage(chatId, '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:', { parse_mode: 'HTML' });
            return;
        }
        await addProduct(bot, chatId, match[1]);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /remove
    bot.onText(/\/remove(?:\s+(\d+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        if (!match[1]) {
            logger.info(`–ö–æ–º–∞–Ω–¥–∞ /remove –±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞, chat_id: ${chatId}`);
            const data = await require('../utils/fileUtils').loadJson(require('../config/config').JSON_FILE);
            if (!Object.keys(data.products).length) {
                await bot.sendMessage(chatId, 'üì≠ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', { parse_mode: 'HTML' });
                await showMainMenu(bot, chatId);
                return;
            }
            const keyboard = {
                inline_keyboard: Object.entries(data.products).map(([article, product]) => [
                    { text: `${product.name} (–∞—Ä—Ç. ${article})`, callback_data: `remove_${article}` },
                ]),
            };
            await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
                reply_markup: keyboard,
                parse_mode: 'HTML',
            });
            return;
        }
        await removeProduct(bot, chatId, match[1]);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /list
    bot.onText(/\/list/, async (msg) => {
        const chatId = msg.chat.id;
        await listProducts(bot, chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /check
    bot.onText(/\/check/, async (msg) => {
        const chatId = msg.chat.id;
        await checkPrices(bot, chatId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;
        if (text.startsWith('/')) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
        if (userStates[chatId] === 'awaiting_article') {
            const article = text.trim();
            if (!/^\d+$/.test(article)) {
                await bot.sendMessage(chatId, '‚ÑπÔ∏è –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.', { parse_mode: 'HTML' });
                await showMainMenu(bot, chatId);
                delete userStates[chatId];
                return;
            }
            await addProduct(bot, chatId, article);
            delete userStates[chatId];
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        switch (text) {
            case 'üõí –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
                userStates[chatId] = 'awaiting_article';
                await bot.sendMessage(chatId, '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:', { parse_mode: 'HTML' });
                break;
            case 'üõçÔ∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤':
                await listProducts(bot, chatId);
                break;
            case '‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
                const data = await require('../utils/fileUtils').loadJson(require('../config/config').JSON_FILE);
                if (!Object.keys(data.products).length) {
                    await bot.sendMessage(chatId, 'üì≠ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', { parse_mode: 'HTML' });
                    await showMainMenu(bot, chatId);
                    return;
                }
                const keyboard = {
                    inline_keyboard: Object.entries(data.products).map(([article, product]) => [
                        { text: `${product.name} (–∞—Ä—Ç. ${article})`, callback_data: `remove_${article}` },
                    ]),
                };
                await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
                    reply_markup: keyboard,
                    parse_mode: 'HTML',
                });
                break;
            case 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã':
                await checkPrices(bot, chatId);
                break;
            default:
                await showMainMenu(bot, chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    bot.on('polling_error', (error) => {
        logger.error(`–û—à–∏–±–∫–∞ polling: ${error.message}`);
    });
}

module.exports = { setupMessageHandlers, bot, userStates };